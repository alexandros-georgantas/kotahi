variables:
  IMAGE_ORG: simplej
  IMAGE_NAME: simplej
  POSTGRES_HOST_AUTH_METHOD: trust
  POSTGRES_USER: kotahidev
  POSTGRES_PASSWORD: kotahidev
  PGUSER: kotahidev
  PGPASSWORD: kotahidev
  S3_PROTOCOL: http
  S3_HOST: localhost
  S3_PORT: 9000
  S3_ACCESS_KEY_ID: nonRootUser
  S3_SECRET_ACCESS_KEY: nonRootPassword
  S3_BUCKET: uploads
  MINIO_ROOT_USER: admin
  MINIO_ROOT_PASSWORD: superSecretAdminPassword
  MINIO_CONSOLE_PORT: 9001

stages:
  - build
  - test
  # - review
  # - staging
  # - production
  # - demo

build:
  image: docker:20.10.5
  variables:
    DOCKER_BUILDKIT: 1
  services:
    - docker:20.10.5-dind
  stage: build
  before_script:
    - cp app/brand-instances-configs/aperture.json app/brandConfig.json
  script:
    - |
      if [ -z "$DOCKERHUB_USERNAME" ] || [ -z "$DOCKERHUB_PASSWORD" ]; then echo "Not pushing" && exit 0; fi
      docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
      docker build --build-arg instance_name=aperture --file ./Dockerfile-ci --cache-from $IMAGE_ORG/$IMAGE_NAME:latest --tag $IMAGE_ORG/$IMAGE_NAME:$CI_COMMIT_SHA --tag $IMAGE_ORG/$IMAGE_NAME:latest .   
      docker push $IMAGE_ORG/$IMAGE_NAME:$CI_COMMIT_SHA
      docker push $IMAGE_ORG/$IMAGE_NAME:latest

#lint:
# allow_failure: true
#image: $IMAGE_ORG/$IMAGE_NAME:$CI_COMMIT_SHA
#stage: test
#variables:
#GIT_STRATEGY: none
#script:
#  - cd ${HOME}
#  - yarn eslint .

lint js:
  image: $IMAGE_ORG/$IMAGE_NAME:$CI_COMMIT_SHA
  stage: test
  variables:
    GIT_STRATEGY: none
  script:
    - cd ${HOME}
    - yarn lint:js

lint style:
  image: $IMAGE_ORG/$IMAGE_NAME:$CI_COMMIT_SHA
  stage: test
  variables:
    GIT_STRATEGY: none
  script:
    - cd ${HOME}
    - yarn lint:style

# minio service:
#   image: $IMAGE_ORG/$IMAGE_NAME:$CI_COMMIT_SHA
#   stage: test
#   variables:
#     GIT_STRATEGY: none
#   script:
#     - cd ${HOME}
#     - wget -q https://dl.min.io/server/minio/release/linux-amd64/minio
#     - chmod +x minio
#     - ./minio server --console-address :${MINIO_CONSOLE_PORT} /data &
#     - wget -q https://dl.min.io/client/mc/release/linux-amd64/mc
#     - chmod +x mc
#     - ./mc config host add cokoServer http://localhost:$S3_PORT $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD
#     - ./mc admin user add cokoServer/  $S3_ACCESS_KEY_ID $S3_SECRET_ACCESS_KEY
#     - ./mc admin user enable cokoServer/ $S3_ACCESS_KEY_ID
#     - ./mc mb cokoServer/$S3_BUCKET
#     - ./mc admin policy set cokoServer/ readwrite user=$S3_ACCESS_KEY_ID

# minio service 1:1:
#   image:
#     name: minio/minio:latest
#     entrypoint: ['']
#   stage: test
#   before_script:
#     - export MINIO_ROOT_USER=$MINIO_ROOT_USER
#     - export MINIO_ROOT_PASSWORD=$MINIO_ROOT_PASSWORD
#   script:
#     - minio server --console-address :${MINIO_CONSOLE_PORT} /data

# minio service 1:2:
#   image:
#     name: minio/mc:latest
#     entrypoint: ['']
#   stage: test
#   needs: ['minio service 1:1']
#   script:
#     - /usr/bin/mc config host add cokoServer http://172.17.0.2:${S3_PORT} $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD
#     - /usr/bin/mc admin user add cokoServer/  $S3_ACCESS_KEY_ID $S3_SECRET_ACCESS_KEY
#     - /usr/bin/mc admin user enable cokoServer/ $S3_ACCESS_KEY_ID
#     - /usr/bin/mc mb cokoServer/$S3_BUCKET
#     - /usr/bin/mc admin policy set cokoServer/ readwrite user=$S3_ACCESS_KEY_ID

.test_template: &run_test_template
  image: $IMAGE_ORG/$IMAGE_NAME:$CI_COMMIT_SHA
  stage: test
  variables:
    GIT_STRATEGY: none
  services:
    - postgres

.test_before_script: &run_test_before_script
  - cd ${HOME}
  - wget -q https://dl.min.io/server/minio/release/linux-amd64/minio
  - chmod +x minio
  - ./minio server --console-address :${MINIO_CONSOLE_PORT} /data &
  - wget -q https://dl.min.io/client/mc/release/linux-amd64/mc
  - chmod +x mc
  - ./mc config host add cokoServer http://localhost:$S3_PORT $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD
  - ./mc admin user add cokoServer/  $S3_ACCESS_KEY_ID $S3_SECRET_ACCESS_KEY
  - ./mc admin user enable cokoServer/ $S3_ACCESS_KEY_ID
  - ./mc mb cokoServer/$S3_BUCKET
  - ./mc admin policy set cokoServer/ readwrite user=$S3_ACCESS_KEY_ID
  - wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add -
  - apt-get update --allow-releaseinfo-change
  - apt-get -y install postgresql-client
  - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"

.test_script: &run_test_script
  - cd ${HOME}
  - cp .env.example .env
  - POSTGRES_HOST=postgres yarn test:all:$TEST_ITEM

test-chrome:
  before_script:
    - *run_test_before_script
  <<: *run_test_template
  variables:
    TEST_ITEM: 'chrome'
  script:
    - *run_test_script

test-firefox:
  before_script:
    - *run_test_before_script
  <<: *run_test_template
  variables:
    TEST_ITEM: 'firefox'
  script:
    - *run_test_script
# test-chrome:
#   image: $IMAGE_ORG/$IMAGE_NAME:$CI_COMMIT_SHA
#   stage: test
#   variables:
#     GIT_STRATEGY: none
#     # setup data for postgres image
#     POSTGRES_USER: kotahidev
#     POSTGRES_PASSWORD: kotahidev
#     # used by psql
#     PGUSER: kotahidev
#     PGPASSWORD: kotahidev
#     # this is used to ignore self signed certs
#     #START_SERVER_AND_TEST_INSECURE: 1
#   services:
#     - postgres
#   script:
#     - cd ${HOME}
#     - apt-get update
#     - apt-get -y install postgresql-client
#     # this is needed for pgboss initial setup
#     - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"
#     # use the example env for tests
#     - cp .env.example .env
#     # specify host here else it confuses the linked postgres image
#     - POSTGRES_HOST=postgres yarn test:all:chrome

# test-firefox:
#   allow_failure: true # at this point Cypress' support for Firefox is not stable
#   image: $IMAGE_ORG/$IMAGE_NAME:$CI_COMMIT_SHA
#   stage: test
#   variables:
#     GIT_STRATEGY: none
#     # setup data for postgres image
#     POSTGRES_USER: kotahidev
#     POSTGRES_PASSWORD: kotahidev
#     # used by psql
#     PGUSER: kotahidev
#     PGPASSWORD: kotahidev
#     #START_SERVER_AND_TEST_INSECURE: 1
#   services:
#     - postgres
#   script:
#     - cd ${HOME}
#     - apt-get update
#     - apt-get -y install postgresql-client
#     # this is needed for pgboss initial setup
#     - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"
#     # use the example env for tests
#     - cp .env.example .env
#     # specify host here else it confuses the linked postgres image
#     - POSTGRES_HOST=postgres yarn test:all:firefox
